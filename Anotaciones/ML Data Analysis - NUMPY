ML Data Analysis

2. NUMPY:

	NumPy es una librería eficiente para el manejo de vectores y matrices multidimensionales.

	NumPy es mucho más rápido para realizar operaciones que Python Lists, ya que en ML se trabaja con 
	dataframes extensos, NumPy es mucho más eficiente.

	Debido a que las máquinas solo entienden 0 y 1, NumPy es mucho más simple para el procesamiento 
	de información que otros más complejos como Python List, ya que se trabaja en C y puede 
	interpretarse de manera más eficiente.

	IMPORTANTE: NumPy Broadcasting (buscar)

	General Broadcasting Rules: Cuando se opera con dos arrays, NumPy compara sus formas (shapes),
	donde dos dimensiones son compatibles cuando son iguales o uno de ellos es 1
	
	_________________________________________________________________________________________________

	A. DataTypes & Attributes:

		El principal DataType de NumPy es el 'ndarray' (n-dimensional array), un datatype universal.

		Cada array del ndarray debe poseer las mismas dimensiones, datatypes y tamaños entre si. Si
		esto no es así, se convierte en una arreglo de listas y deja de ser un arreglo de arrays.

		Importación de NumPy:			import numpy as np
		Creación de un array (n=1):		a1 = np.array([1, 4, ...])	/	a1 = np.array(lista)
		Creación de un array (n=2):		a2 = np.array( [[...],		/	a2 = np.array([l1, l2])
														[...]])	
		Creación de un array (n=3):		a3 = np.array( [ [[...],	/	a3 = np.array([ [[...]] ,...])
														  [...]],
														 [[...],		
														  [...]],
														   ...  ])	
 		Devuelve la forma del ndarray:			a1.shape, 	a2.shape, 	a3.shape...
 		Devuelve las dimensiones:				a1.ndim, 	a2.ndim, 	a3.ndim...
 		Devuelve el datatype:					a1.dtype, 	a2.dtype, 	a3.dtype...
 		Cantidad de valores total:				a1.size,	a2.size,	a3.size...
 		
 		Crear un DataFrame desde un ndarray:	df = pd.DataFrame(a1)	/	df = pd.DataFrame(a2)
 												NOTA: El ndarray n=1 o n=2.

	_________________________________________________________________________________________________

 	B. Creating NumPy Arrays:

 		Crear array de 1s:				ones = np.ones(x) 	/	((x, y))	/ 	((x, y, z))
 		Crear array de 0s:				zeros = np.zeros(x) /	((x, y))	/ 	((x, y, z))
 										NOTA: dtype es float por default. Ver el Docstring.
		Crear array con range:			range_array = np.arange(start, stop, steps)	
		Crear un random array:			random_array = np.random.randint(low, high, size=(x,y,z,...))
		Crear un random array 0-1:		random_array_2 = np.random.random((x,y,z,...))
		Crear un random array 0-1:		random_array_3 = np.random.rand(x,y,z,...)

		Pseudo-Random Numbers:			np.random.seed()
										NOTA: Con esto se 'guarda' un ndarray random. Ver JNotebook.

		Devuelve elementos únicos en un ndarray:	np.unique(random_array_3)						

	_________________________________________________________________________________________________

	C. Viewing Arrays and Matrices:
		
		Mostrar arrays/valores de un ndarray:	(Ejemplos)	
			a1[1]
			a3[1, 1]
			a3[1][1]
			a3[1, 1, 2]
			a3[:2, :2, 1]
			...

		Ejemplo: Creando un ndarray de n=4
			a4 = np.random.randint(10, size=(2, 3, 4, 5))

	_________________________________________________________________________________________________

	D. Manipulating & Comparing Arrays:

		- Arithmetic:
			a1*a2
			a1+a2
			a1/a2
			a1**a2
			...

			Ambos arrays deben tener el mismo tamaño o que uno de ellos sea de un solo valor. 
			Habría que 'reshape'

			Existen funciones como 'np.square()', 'np.add', etc. REVISAR DOCUMENTACIÓN!

		- Aggregation: Performing the same operation on a number of things.

			IMPORTANTE: Para mayor eficiencia.
			Use Python's methods on Python datatypes (sum()).
			use NumPy's methods on NumPy Arrays (np.sum()).

			Ejemplo: Creando un array masivo...

				massive_array = np.random.random(100)
				%timeit sum(massive_array)     			#Python's sum()
				%timeit np.sum(massive_array)  			#NumPy's sum() (MAS RAPIDO)

				NOTA: Jupyter Notebooks o Python Magic Functions (% al inicio).

			Variance: Measure of the average degree to which each number is different to the mean.
				
				High Variance: Wider range of numbers.
				Lower Variance: Lower range of numbers.

				np.var(a2)

			#Standard Deviation: Measure of how spread out a group of numbers is from the mean. 
								(Sqrt of variance)
				np.std(a2)
				np.sqrt(np.var(a2))

			NOTA: Podemos observar gráficamente estas estadísticas con matplotlib (plot)

		- Reshaping & Transposing:

			Reshaping:			a2_reshape = a2.reshape(2, 3, 1)	(EJEMPLO, de 2x3 a 2x3x1)
			Transpose:			a2_trans = a2.T 					(Matriz traspuesta)

		- Dot Product (Producto Punto):

			Producto Punto:		np.dot(mat1, mat2)		(mat1 5x3 y mat2 es 3x5)
			
			NOTA: Dot Product y Element-Wise Multiplication (Hadamard Product) son distintos.

			-Dot Product Example (Nut Butter Sales):

				#Creando un cuadro de ventas aleatoria (por práctica):
				np.random.seed(0)
				sales_amounts = np.random.randint(20, size=(5, 3))
				weekly_sales = pd.DataFrame(sales_amounts, 
                            index = ["Mon", "Tues", "Wed", "Thurs", "Fri"],
                            columns = ["Almond Butter", "Peanut Butter", "Cashew Butter"])

                #Lista de precios para cada producto:
                prices = np.array([10, 8, 12])
                butter_prices = pd.DataFrame(prices.reshape(1, 3),
                             index = ["Price"], 
                             columns = ["Almond Butter", "Peanut Butter", "Cashew Butter"])

                #Ventas totales haciendo Dot Product:
                daily_sales = butter_prices.dot(weekly_sales.T)
                weekly_sales["Total ($)"] = daily_sales.T

		- Comparison Operators:

			Ver la documentación Numpy Comparison Operators!

			Comparando dos arrays, se devuelve un array un nuevo array (dtype('bool')) True/False's 
			de los valores que fueron comparados.

			Se utilizan los operadores comunes (<, ==, >, <=, >=, !=) y funciones vistas en la 
			documentación.

			Ejemplo:		a1 < a2 	|	a1 == a2 	|	a1 >=2	| 	etc...

	_________________________________________________________________________________________________

	E. Sorting Arrays:

		Devuelve una copia ordenada de los axis de un array:		np.sort(random_array)
		Devuelve una copia ordenada de los index de mayor valor:	np.argsort(random_array)
		Devuelve el index del mínimo valor en el axis:				np.argmin(a1)
		Devuelve el index del máximo valor en el axis:				np.argmax(a1)
		Para arrays de más de una dimensión:			np.argmin(a2, axis=0) |	np.argmax(a2, axis=1)
		
	_________________________________________________________________________________________________

	F. Practical Example - Turn images into NumPy Arrays:

		#Para mostrar una imagen en el Jupyter Notebook: 
			<img src="images/panda.png"/> en MARKDOWN

		#Convertir una imagen en un NumPy Array
		from matplotlib.image import imread
		panda = imread("images/panda.png")
		
		print(type(panda)), panda.size, panda.shape, panda.ndim
		#Notese que el panda.shape tiene 2330x3500 como las resolución de la imagen.
		#panda posee entonces 2330 matrices 3500x3 (FilasxColumnas), donde 3 representa
		#la combinación de colores RGB del pixel.

		#Puede comprobarse lo mismo con las imagenes 'car-photo.png' y 'dog-photo.png'.
